<context>
# Overview  
The "FightYourTax.AI" application is a web-based platform designed to assist property owners and administrators with property tax assessment and analysis.
It solves the problem of understanding and potentially challenging property tax assessments by providing data-driven insights and reports.
It is for property owners (consumers) seeking to understand their property's valuation and tax liabilities, and for administrators who manage the underlying property data.
The application is valuable because it centralizes property information, automates aspects of property analysis, and empowers users with information to make informed decisions regarding property taxes.

# Core Features  
1.  **Consumer Property Search & Reporting:**
    *   **What it does:** Allows consumers to search for their properties and generate analytical reports (e.g., tax appeal assistance, market valuation).
    *   **Why it's important:** Provides homeowners with tools to understand and verify their property assessments.
    *   **How it works:** Users input property identifiers. The system retrieves data from a database (using Drizzle ORM), performs analysis using backend logic (in `src/lib/property-analysis`), and presents a report.
2.  **Administrator Data Management:**
    *   **What it does:** Provides an interface for administrators to input, update, and manage comprehensive property data. This includes property details, comparable sales data (comps), neighborhood information, fixtures, and structural elements.
    *   **Why it's important:** Ensures the accuracy and reliability of the data underpinning all analyses and reports.
    *   **How it works:** Admins use a dedicated section of the application to interact with forms and tables that modify data stored in the database via Drizzle ORM.
3.  **Property Analysis Engine:**
    *   **What it does:** Core backend logic that processes various data points (property attributes, comps, market trends) to generate valuations or assessment recommendations.
    *   **Why it's important:** This is the heart of the application, providing the analytical power.
    *   **How it works:** Likely involves services in `src/lib/property-analysis/services` that implement specific analytical models and calculations. It can be triggered via API calls (e.g., `/api/analyze`) or directly by server components.
4.  **Subscription Management (Inferred):**
    *   **What it does:** Allows users to manage service subscriptions.
    *   **Why it's important:** Potentially gates access to premium features, detailed reports, or higher usage limits.
    *   **How it works:** Users would interact with a dedicated section to choose subscription plans, process payments (integration with a payment gateway would be needed), and manage their subscription status.

# User Experience  
*   **User Personas:**
    *   **Property Owner (Consumer):** Individuals who own residential or commercial property and want to understand their property tax assessment, explore potential for appeal, or get a general valuation. They may have limited technical expertise.
    *   **System Administrator:** Data-savvy individuals responsible for maintaining the integrity and completeness of the property database. They require efficient tools for data entry and management.
*   **Key User Flows:**
    *   **Consumer - Report Generation:**
        1. User logs in/registers.
        2. User searches for their property (e.g., by address or parcel number).
        3. User selects their property from search results.
        4. User requests a specific type of report (e.g., tax appeal, market analysis).
        5. System generates and displays the report.
        6. User can download or review the report.
    *   **Administrator - Data Update:**
        1. Admin logs in.
        2. Admin navigates to the relevant data management section (e.g., "Properties," "Comparables").
        3. Admin searches for or selects an existing record to update, or chooses to add a new record.
        4. Admin modifies/enters data through forms.
        5. Admin saves changes, updating the database.
*   **UI/UX Considerations:**
    *   **Consumer Interface:** Should be intuitive, user-friendly, with clear navigation and simple forms. Report presentation should be easy to understand.
    *   **Admin Interface:** Prioritize efficiency and accuracy for data entry. Robust search, filtering, and batch editing capabilities would be beneficial. Clear validation and error feedback.
    *   **Responsiveness:** Application should be accessible on various devices (desktop, tablet, mobile).
    *   **Loading States:** Implement clear loading indicators (e.g., using `loading.tsx` or Suspense boundaries) during data fetching and report generation.
    *   **Accessibility:** Adhere to accessibility best practices.
</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>